class Solution {
public:
    int call(int m,int n,int x,int y,vector<vector<int>>& grid,vector<vector<int>>& dp){
        
        if(x<0 || x>=m || y<0 || y>=n-1) return 0;
        int cur=0;
        if(dp[x][y]!=-1) return dp[x][y];
        if(x>0 && grid[x][y]<grid[x-1][y+1]) cur=max(cur,1+call(m,n,x-1,y+1,grid,dp));
        if(grid[x][y]<grid[x][y+1]) cur=max(cur,1+call(m,n,x,y+1,grid,dp));
        if(x<m-1 && grid[x][y]<grid[x+1][y+1]) cur=max(cur,1+call(m,n,x+1,y+1,grid,dp));

        return dp[x][y]=cur;
      
    }
    int maxMoves(vector<vector<int>>& grid) {
        int m= grid.size();
        int n=grid[0].size();

        int x=0;
        vector<vector<int>> dp(m+1,vector<int> (n+1,-1));
        for(int i=0;i<m;i++){
            
            if(i>0 ){
                if(grid[i][0]<grid[i-1][1]) x=max(1+call(m,n,i-1,1,grid,dp),x);
            }
            if(grid[i][0]<grid[i][1]) x=max(1+call(m,n,i,1,grid,dp),x);
            if(i<m-1)
                if(grid[i][0]<grid[i+1][1]) x=max(1+call(m,n,i+1,1,grid,dp),x);
            
        }
        return x;
    }
};
